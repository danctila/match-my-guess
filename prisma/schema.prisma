// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for persistent user data
model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  username      String    @unique
  displayName   String
  // Authentication fields can be added here if needed
  // email       String?   @unique
  // password    String?
  
  // Relations
  players       Player[]
  hostedLobbies Lobby[]   @relation("LobbyHost")
}

// Lobby model for game session management
model Lobby {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String    @default("New Game")
  gameType      GameType  @default(WORD_MATCH)
  status        LobbyStatus @default(WAITING)
  maxPlayers    Int       @default(2)
  
  // Relations
  hostId        String    // Required host user
  host          User      @relation("LobbyHost", fields: [hostId], references: [id])
  game          Game?     // Optional until game starts
  players       Player[]
  
  @@index([hostId])
}

// Game model for actual gameplay state
model Game {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime  @default(now())
  endedAt       DateTime?
  gameType      GameType
  status        GameStatus @default(IN_PROGRESS)
  config        Json      // Flexible game configuration
  metadata      Json      // Game-specific metadata (e.g., winning word)
  
  // Relations
  lobbyId       String    @unique  // One-to-one with Lobby
  lobby         Lobby     @relation(fields: [lobbyId], references: [id])
  players       Player[]
  moves         Move[]
  
  @@index([lobbyId])
}

// Player model for game participation
model Player {
  id            String    @id @default(cuid())
  joinedAt      DateTime  @default(now())
  lastActiveAt  DateTime  @updatedAt
  isReady       Boolean   @default(false)
  metadata      Json      // Player game-specific data (e.g., secret word)
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  lobbyId       String
  lobby         Lobby     @relation(fields: [lobbyId], references: [id])
  gameId        String?
  game          Game?     @relation(fields: [gameId], references: [id])
  moves         Move[]
  
  @@unique([userId, lobbyId]) // One player instance per user per lobby
  @@index([userId])
  @@index([lobbyId])
  @@index([gameId])
}

// Move model for game actions (replaces Guess)
model Move {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  moveType      String    // e.g., "guess", "reveal", etc.
  data          Json      // Flexible move data
  
  // Relations
  gameId        String
  game          Game      @relation(fields: [gameId], references: [id])
  playerId      String
  player        Player    @relation(fields: [playerId], references: [id])
  
  @@index([gameId])
  @@index([playerId])
}

enum GameType {
  WORD_MATCH     // Current game type
  // Future game types can be added here
  // WORD_CHAIN
  // CROSSWORD
  // etc.
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum LobbyStatus {
  WAITING       // Waiting for players
  READY         // All players ready
  IN_GAME       // Game in progress
  FINISHED      // Game completed
  ABANDONED     // Lobby abandoned
}
